import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as T


class UNet(nn.Module):
    def __init__(self):
        super(UNet, self).__init__()
        # contracting path
        self.conv1_1 = self.ConvReLU(3, 64, kernel=3, stride=1, padding=0)
        self.conv1_2 = self.ConvRELU(64, 64, kernel=3, stride=1, padding=0)
        self.maxpool1 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.resize1 = T.Resize((128, 128))

        self.conv2_1 = self.ConvRELU(64, 128, kernel=3, stride=1, padding=0)
        self.conv2_2 = self.ConvRELU(128, 128, kernel=3, stride=1, padding=0)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.resize2 = T.Resize((96, 96))

        self.conv3_1 = self.ConvRELU(128, 256, kernel=3, stride=1, padding=0)
        self.conv3_2 = self.ConvRELU(256, 256, kernel=3, stride=1, padding=0)
        self.maxpool3 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.resize3 = T.Resize((48, 48))

        self.conv4_1 = self.ConvRELU(256, 512, kernel=3, stride=1, padding=0)
        self.conv4_2 = self.ConvRELU(512, 512, kernel=3, stride=1, padding=0)
        self.maxpool4 = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)

        # expansive path
        self.conv5_1 = self.ConvReLU(512, 1024, kernel=3, stride=1, padding=1)
        self.conv5_2 = self.ConvReLU(1024, 1024, kernel=3, stride=1, padding=1)
        self.upsample1 = nn.ConvTranspose2d(1024, 1024, kernel_size=2, stride=2)

        self.conv6_1 = self.ConvReLU(1024, 512, kernel=3, stride=1, padding=1)
        self.conv6_2 = self.ConvReLU(512, 512, kernel=3, stride=1, padding=1)
        self.upsample2 = nn.ConvTranspose2d(512, 512, kernel_size=2, stride=2)

        self.conv7_1 = self.ConvReLU(512, 256, kernel=3, stride=1, padding=1)
        self.conv7_2 = self.ConvReLU(256, 256, kernel=3, stride=1, padding=1)
        self.upsample3 = nn.ConvTranspose2d(256, 512, kernel_size=2, stride=2)

        self.conv8_1 = self.ConvReLU(256, 128, kernel=3, stride=1, padding=1)
        self.conv8_2 = self.ConvReLU(128, 128, kernel=3, stride=1, padding=1)
        self.upsample4 = nn.ConvTranspose2d(128, 128, kernel_size=2, stride=2)

        self.conv9_1 = self.ConvReLU(128, 64, kernel=3, stride=1, padding=1)
        self.conv9_2 = self.ConvReLU(64, 64, kernel=3, stride=1, padding=1)
        self.conv10 = nn.Conv2d(64, 3, kernel_size=1, stride=1, padding=0)

    def ConvReLU(self, c_in, c_out, kernel, stride, padding):
        return nn.Sequential(nn.Conv2d(c_in, c_out, kernel, stride, padding),
                             nn.BatchNorm2d(c_out),
                             nn.ReLU())

    def forward(self, x):
        # contracting
        x = self.conv1_1(x)
        x  = self.conv1_2(x)
        up1 = self.resize1(x)
        x = self.maxpool1(x)

        x = self.conv2_1(x)
        x = self.conv2_2(x)
        up2 = self.resize2(x)
        x = self.maxpool2(x)

        x = self.conv3_1(x)
        x = self.conv3_2(x)
        up3 = self.resize3(x)
        x = self.maxpool3(x)

        x = self.conv4_1(x)
        x = self.conv4_2(x)
        up4 = x
        x = self.maxpool4(x)

        x = self.conv5_1(x)
        x = self.conv5_2(x)
        x = self.upsample1(x)

        x = torch.cat([x, up4], 1)
        x = self.conv6_1(x)
        x = self.conv6_2(x)
        x = self.upsample1(x)

        x = torch.cat([x, up3], 1)
        x = self.conv7_1(x)
        x = self.conv7_2(x)
        x = self.upsample1(x)

        x = torch.cat([x, up2], 1)
        x = self.conv8_1(x)
        x = self.conv8_2(x)
        x = self.upsample1(x)

        x = torch.cat([x, up1], 1)
        x = self.conv9_1(x)
        x = self.conv9_2(x)
        x = self.conv10(x)
